const staticVersion = 'V3.2'
const offlineVersion = 'V2.2'

const staticCacheName = 'staticfiles' + staticVersion;
const offlinePageCache = 'offlinepage' + offlineVersion;

function handleInstallEvent(event) {
  const offlineEventUrl = "<%= Rails.application.routes.url_helpers.offline_events_path %>";

  skipWaiting();

  event.waitUntil(async function() {
    const staticCache = await caches.open(staticCacheName);
    return staticCache.addAll([
      '<%= asset_path "application.css" %>',
      '<%= asset_path "events.jpg" %>',
    ]);
  }());
}

function handleActivateEvent(event) {
  event.waitUntil(async function() {
    const keys = await caches.keys();
    await Promise.all(keys.map(cacheName => {
      if (cacheName != staticCacheName && cacheName != offlinePageCache) {
        return caches.delete(cacheName);
      }
    }));
    //  Take control of open tab immediately 
    return clients.claim();
  }());
}

function isYelpImg(request) {
  return request.url.includes('yelpcdn') && request.destination.includes('image')
}

// TODO: only create after event post or if user logs in and the offlinePageCache is a new version
async function createOfflinePage() {
  const offlineEventUrl = "<%= Rails.application.routes.url_helpers.offline_events_path %>";
  const cacheOpen = await caches.open(offlinePageCache);
  await cacheOpen.add(new Request(offlineEventUrl, { headers: {Accept: 'text/html'}, credentials: 'same-origin'}));
}

function handleFetchEvent(event) {
  const postEventUrl = "<%= Rails.application.routes.url_helpers.events_path %>";

  const request = event.request;

  // Browser will handle broken images
  if (isYelpImg(request)) {
    return;
  }

  event.respondWith( async function() {
    // See if we can get the resource from the cache
    cacheResponse = await caches.match(request);
    if (cacheResponse) {
      return cacheResponse;
    }
    // Let fetch try and get the resource if above fails
    try {
      const fetchResponse = await fetch(request); 

      // Save offline events page if db was updated
      if (fetchResponse.ok && request.url.includes(postEventUrl) && request.method == 'POST') {
        createOfflinePage();
      }

      return fetchResponse;
    } catch(err) {
      // Show user the offline page if fetch fails to retrieve resource
      return caches.match('offline_events');
    }
  }());
} 

function handleMessageEvent(event) {
  event.waitUntil( async function() {
    switch (event.data) {
      case 'create offline page':
        await createOfflinePage();
        break;
      default:
        break;
    }
  }());
}

addEventListener('install', handleInstallEvent);
addEventListener('activate', handleActivateEvent);
addEventListener('fetch', handleFetchEvent);
addEventListener('message', handleMessageEvent);
